name: ios

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-15

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - name: Set active Xcode path
        run: |
          xcode-select -p
          xcrun xcodebuild -version
          xcrun xcodebuild -showsdks
          XCODE_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["xcode"]);')
          sudo xcode-select -s /Applications/Xcode_$XCODE_VERSION.app/Contents/Developer

      - name: Create canonical source directory
        run: |
          set -x
          sudo mkdir -p /Users/Shared
          cp -R $GITHUB_WORKSPACE /Users/Shared/
          mv /Users/Shared/$(basename $GITHUB_WORKSPACE) /Users/Shared/telegram-ios

      - name: Setup Provisioning Profiles
        run: |
          set -x
          SOURCE_DIR=/Users/Shared/telegram-ios
          cd $SOURCE_DIR
          
          # Создаем директорию для provisioning profiles если её нет
          mkdir -p build-input/configuration-repository/provisioning
          
          # Создаем fake provisioning profiles
          echo "Creating fake provisioning profiles..."
          
          # Создаем BUILD файл для provisioning с помощью echo
          echo 'filegroup(
          name = "AppStore.mobileprovision",
          srcs = ["AppStore.mobileprovision"],
          visibility = ["//visibility:public"],
)

filegroup(
    name = "Share.mobileprovision",
    srcs = ["Share.mobileprovision"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "NotificationService.mobileprovision",
    srcs = ["NotificationService.mobileprovision"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "NotificationContent.mobileprovision",
    srcs = ["NotificationContent.mobileprovision"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "Widget.mobileprovision",
    srcs = ["Widget.mobileprovision"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "BroadcastUpload.mobileprovision",
    srcs = ["BroadcastUpload.mobileprovision"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "BroadcastSetupUI.mobileprovision",
    srcs = ["BroadcastSetupUI.mobileprovision"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "Intents.mobileprovision",
    srcs = ["Intents.mobileprovision"],
    visibility = ["//visibility:public"],
)' > build-input/configuration-repository/provisioning/BUILD

          # Создаем пустые fake provisioning files
          touch build-input/configuration-repository/provisioning/AppStore.mobileprovision
          touch build-input/configuration-repository/provisioning/Share.mobileprovision
          touch build-input/configuration-repository/provisioning/NotificationService.mobileprovision
          touch build-input/configuration-repository/provisioning/NotificationContent.mobileprovision
          touch build-input/configuration-repository/provisioning/Widget.mobileprovision
          touch build-input/configuration-repository/provisioning/BroadcastUpload.mobileprovision
          touch build-input/configuration-repository/provisioning/BroadcastSetupUI.mobileprovision
          touch build-input/configuration-repository/provisioning/Intents.mobileprovision

      - name: Build the App
        run: |
          xcode-select -p
          xcrun xcodebuild -version
          xcrun xcodebuild -showsdks
          set -x

          SOURCE_DIR=/Users/Shared/telegram-ios
          BAZEL_USER_ROOT="/private/var/tmp/_bazel_containerhost"

          cd $SOURCE_DIR

          BUILD_NUMBER_OFFSET="$(cat build_number_offset)"

          export APP_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["app"]);')
          export COMMIT_COUNT=$(git rev-list --count HEAD)
          export COMMIT_COUNT="$(($COMMIT_COUNT+$BUILD_NUMBER_OFFSET))"
          export BUILD_NUMBER="$COMMIT_COUNT"
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

          python3 build-system/Make/ImportCertificates.py --path build-system/fake-codesigning/certs
          python3 -u build-system/Make/Make.py \
            --bazelUserRoot="$BAZEL_USER_ROOT" \
            build \
            --configurationPath="build-system/appstore-configuration.json" \
            --codesigningInformationPath=build-system/fake-codesigning \
            --configuration=release_arm64 \
            --buildNumber="$BUILD_NUMBER" \
            --outputBuildArtifactsPath="build/artifacts"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ env.BUILD_NUMBER }}
          release_name: Telegram ${{ env.APP_VERSION }} (${{ env.BUILD_NUMBER }})
          body: |
            An unsigned build of Telegram for iOS ${{ env.APP_VERSION }} (${{ env.BUILD_NUMBER }})
          draft: false
          prerelease: false

      - name: Upload Release IPA
        id: upload-release-ipa 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /Users/Shared/telegram-ios/build/artifacts/Telegram.ipa
          asset_name: Telegram.ipa
          asset_content_type: application/zip

      - name: Upload Release DSYM
        id: upload-release-dsym 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /Users/Shared/telegram-ios/build/artifacts/Telegram.DSYMs.zip
          asset_name: Telegram.DSYMs.zip
          asset_content_type: application/zip
